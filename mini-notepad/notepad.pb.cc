// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notepad.proto

#include "notepad.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace notepad
{
    PROTOBUF_CONSTEXPR User::User(
        ::_pbi::ConstantInitialized) : _impl_{
                                           /*decltype(_impl_.name_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_.email_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_.password_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_.location_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_._cached_size_)*/ {}} {}
    struct UserDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR UserDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~UserDefaultTypeInternal() {}
        union
        {
            User _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserDefaultTypeInternal _User_default_instance_;
    PROTOBUF_CONSTEXPR Users::Users(
        ::_pbi::ConstantInitialized) : _impl_{
                                           /*decltype(_impl_.users_)*/ {}, /*decltype(_impl_._cached_size_)*/ {}} {}
    struct UsersDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR UsersDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~UsersDefaultTypeInternal() {}
        union
        {
            Users _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UsersDefaultTypeInternal _Users_default_instance_;
    PROTOBUF_CONSTEXPR Content::Content(
        ::_pbi::ConstantInitialized) : _impl_{
                                           /*decltype(_impl_.line_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_._cached_size_)*/ {}} {}
    struct ContentDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR ContentDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~ContentDefaultTypeInternal() {}
        union
        {
            Content _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContentDefaultTypeInternal _Content_default_instance_;
    PROTOBUF_CONSTEXPR Notepad::Notepad(
        ::_pbi::ConstantInitialized) : _impl_{
                                           /*decltype(_impl_.contents_)*/ {}, /*decltype(_impl_.id_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_.name_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_.user_name_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_._cached_size_)*/ {}} {}
    struct NotepadDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR NotepadDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~NotepadDefaultTypeInternal() {}
        union
        {
            Notepad _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NotepadDefaultTypeInternal _Notepad_default_instance_;
    PROTOBUF_CONSTEXPR Version::Version(
        ::_pbi::ConstantInitialized) : _impl_{
                                           /*decltype(_impl_.contents_)*/ {}, /*decltype(_impl_.number_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_.created_time_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_.notepad_id_)*/ {&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}, /*decltype(_impl_._cached_size_)*/ {}} {}
    struct VersionDefaultTypeInternal
    {
        PROTOBUF_CONSTEXPR VersionDefaultTypeInternal()
            : _instance(::_pbi::ConstantInitialized{}) {}
        ~VersionDefaultTypeInternal() {}
        union
        {
            Version _instance;
        };
    };
    PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VersionDefaultTypeInternal _Version_default_instance_;
} // namespace notepad
static ::_pb::Metadata file_level_metadata_notepad_2eproto[5];
static constexpr ::_pb::EnumDescriptor const **file_level_enum_descriptors_notepad_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const **file_level_service_descriptors_notepad_2eproto = nullptr;

const uint32_t TableStruct_notepad_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::notepad::User, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::notepad::User, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::notepad::User, _impl_.email_),
    PROTOBUF_FIELD_OFFSET(::notepad::User, _impl_.password_),
    PROTOBUF_FIELD_OFFSET(::notepad::User, _impl_.location_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::notepad::Users, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::notepad::Users, _impl_.users_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::notepad::Content, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::notepad::Content, _impl_.line_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::notepad::Notepad, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::notepad::Notepad, _impl_.id_),
    PROTOBUF_FIELD_OFFSET(::notepad::Notepad, _impl_.name_),
    PROTOBUF_FIELD_OFFSET(::notepad::Notepad, _impl_.user_name_),
    PROTOBUF_FIELD_OFFSET(::notepad::Notepad, _impl_.contents_),
    ~0u, // no _has_bits_
    PROTOBUF_FIELD_OFFSET(::notepad::Version, _internal_metadata_),
    ~0u, // no _extensions_
    ~0u, // no _oneof_case_
    ~0u, // no _weak_field_map_
    ~0u, // no _inlined_string_donated_
    PROTOBUF_FIELD_OFFSET(::notepad::Version, _impl_.number_),
    PROTOBUF_FIELD_OFFSET(::notepad::Version, _impl_.created_time_),
    PROTOBUF_FIELD_OFFSET(::notepad::Version, _impl_.notepad_id_),
    PROTOBUF_FIELD_OFFSET(::notepad::Version, _impl_.contents_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    {0, -1, -1, sizeof(::notepad::User)},
    {10, -1, -1, sizeof(::notepad::Users)},
    {17, -1, -1, sizeof(::notepad::Content)},
    {24, -1, -1, sizeof(::notepad::Notepad)},
    {34, -1, -1, sizeof(::notepad::Version)},
};

static const ::_pb::Message *const file_default_instances[] = {
    &::notepad::_User_default_instance_._instance,
    &::notepad::_Users_default_instance_._instance,
    &::notepad::_Content_default_instance_._instance,
    &::notepad::_Notepad_default_instance_._instance,
    &::notepad::_Version_default_instance_._instance,
};

const char descriptor_table_protodef_notepad_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
    "\n\rnotepad.proto\022\007notepad\"G\n\004User\022\014\n\004name"
    "\030\001 \001(\t\022\r\n\005email\030\002 \001(\t\022\020\n\010password\030\003 \001(\t\022"
    "\020\n\010location\030\004 \001(\t\"%\n\005Users\022\034\n\005users\030\001 \003("
    "\0132\r.notepad.User\"\027\n\007Content\022\014\n\004line\030\001 \001("
    "\t\"Z\n\007Notepad\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\021"
    "\n\tuser_name\030\003 \001(\t\022\"\n\010contents\030\004 \003(\0132\020.no"
    "tepad.Content\"g\n\007Version\022\016\n\006number\030\001 \001(\t"
    "\022\024\n\014created_time\030\002 \001(\t\022\022\n\nnotepad_id\030\003 \001"
    "(\t\022\"\n\010contents\030\004 \003(\0132\020.notepad.Contentb\006"
    "proto3";
static ::_pbi::once_flag descriptor_table_notepad_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_notepad_2eproto = {
    false,
    false,
    366,
    descriptor_table_protodef_notepad_2eproto,
    "notepad.proto",
    &descriptor_table_notepad_2eproto_once,
    nullptr,
    0,
    5,
    schemas,
    file_default_instances,
    TableStruct_notepad_2eproto::offsets,
    file_level_metadata_notepad_2eproto,
    file_level_enum_descriptors_notepad_2eproto,
    file_level_service_descriptors_notepad_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable *descriptor_table_notepad_2eproto_getter()
{
    return &descriptor_table_notepad_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_notepad_2eproto(&descriptor_table_notepad_2eproto);
namespace notepad
{

    // ===================================================================

    class User::_Internal
    {
    public:
    };

    User::User(::PROTOBUF_NAMESPACE_ID::Arena *arena,
               bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:notepad.User)
    }
    User::User(const User &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        User *const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.name_){}, decltype(_impl_.email_){}, decltype(_impl_.password_){}, decltype(_impl_.location_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_name().empty())
        {
            _this->_impl_.name_.Set(from._internal_name(),
                                    _this->GetArenaForAllocation());
        }
        _impl_.email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_email().empty())
        {
            _this->_impl_.email_.Set(from._internal_email(),
                                     _this->GetArenaForAllocation());
        }
        _impl_.password_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_password().empty())
        {
            _this->_impl_.password_.Set(from._internal_password(),
                                        _this->GetArenaForAllocation());
        }
        _impl_.location_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_location().empty())
        {
            _this->_impl_.location_.Set(from._internal_location(),
                                        _this->GetArenaForAllocation());
        }
        // @@protoc_insertion_point(copy_constructor:notepad.User)
    }

    inline void User::SharedCtor(
        ::_pb::Arena *arena, bool is_message_owned)
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.name_){}, decltype(_impl_.email_){}, decltype(_impl_.password_){}, decltype(_impl_.location_){}, /*decltype(_impl_._cached_size_)*/ {}};
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.email_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.password_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.location_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    User::~User()
    {
        // @@protoc_insertion_point(destructor:notepad.User)
        if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void User::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.name_.Destroy();
        _impl_.email_.Destroy();
        _impl_.password_.Destroy();
        _impl_.location_.Destroy();
    }

    void User::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void User::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:notepad.User)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.name_.ClearToEmpty();
        _impl_.email_.ClearToEmpty();
        _impl_.password_.ClearToEmpty();
        _impl_.location_.ClearToEmpty();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *User::_InternalParse(const char *ptr, ::_pbi::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
            // string name = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                {
                    auto str = _internal_mutable_name();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.User.name"));
                }
                else
                    goto handle_unusual;
                continue;
            // string email = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                {
                    auto str = _internal_mutable_email();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.User.email"));
                }
                else
                    goto handle_unusual;
                continue;
            // string password = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                {
                    auto str = _internal_mutable_password();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.User.password"));
                }
                else
                    goto handle_unusual;
                continue;
            // string location = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34))
                {
                    auto str = _internal_mutable_location();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.User.location"));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            } // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        } // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t *User::_InternalSerialize(
        uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:notepad.User)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // string name = 1;
        if (!this->_internal_name().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.User.name");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_name(), target);
        }

        // string email = 2;
        if (!this->_internal_email().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_email().data(), static_cast<int>(this->_internal_email().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.User.email");
            target = stream->WriteStringMaybeAliased(
                2, this->_internal_email(), target);
        }

        // string password = 3;
        if (!this->_internal_password().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.User.password");
            target = stream->WriteStringMaybeAliased(
                3, this->_internal_password(), target);
        }

        // string location = 4;
        if (!this->_internal_location().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.User.location");
            target = stream->WriteStringMaybeAliased(
                4, this->_internal_location(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:notepad.User)
        return target;
    }

    size_t User::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:notepad.User)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string name = 1;
        if (!this->_internal_name().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_name());
        }

        // string email = 2;
        if (!this->_internal_email().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_email());
        }

        // string password = 3;
        if (!this->_internal_password().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_password());
        }

        // string location = 4;
        if (!this->_internal_location().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_location());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        User::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *User::GetClassData() const { return &_class_data_; }

    void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message &to_msg, const ::PROTOBUF_NAMESPACE_ID::Message &from_msg)
    {
        auto *const _this = static_cast<User *>(&to_msg);
        auto &from = static_cast<const User &>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:notepad.User)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_name().empty())
        {
            _this->_internal_set_name(from._internal_name());
        }
        if (!from._internal_email().empty())
        {
            _this->_internal_set_email(from._internal_email());
        }
        if (!from._internal_password().empty())
        {
            _this->_internal_set_password(from._internal_password());
        }
        if (!from._internal_location().empty())
        {
            _this->_internal_set_location(from._internal_location());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void User::CopyFrom(const User &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:notepad.User)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool User::IsInitialized() const
    {
        return true;
    }

    void User::InternalSwap(User *other)
    {
        using std::swap;
        auto *lhs_arena = GetArenaForAllocation();
        auto *rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.name_, lhs_arena,
            &other->_impl_.name_, rhs_arena);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.email_, lhs_arena,
            &other->_impl_.email_, rhs_arena);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.password_, lhs_arena,
            &other->_impl_.password_, rhs_arena);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.location_, lhs_arena,
            &other->_impl_.location_, rhs_arena);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
            file_level_metadata_notepad_2eproto[0]);
    }

    // ===================================================================

    class Users::_Internal
    {
    public:
    };

    Users::Users(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                 bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:notepad.Users)
    }
    Users::Users(const Users &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        Users *const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.users_){from._impl_.users_}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        // @@protoc_insertion_point(copy_constructor:notepad.Users)
    }

    inline void Users::SharedCtor(
        ::_pb::Arena *arena, bool is_message_owned)
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.users_){arena}, /*decltype(_impl_._cached_size_)*/ {}};
    }

    Users::~Users()
    {
        // @@protoc_insertion_point(destructor:notepad.Users)
        if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void Users::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.users_.~RepeatedPtrField();
    }

    void Users::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void Users::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:notepad.Users)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.users_.Clear();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *Users::_InternalParse(const char *ptr, ::_pbi::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
            // repeated .notepad.User users = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                {
                    ptr -= 1;
                    do
                    {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_users(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr))
                            break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            } // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        } // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t *Users::_InternalSerialize(
        uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:notepad.Users)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // repeated .notepad.User users = 1;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_users_size());
             i < n; i++)
        {
            const auto &repfield = this->_internal_users(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:notepad.Users)
        return target;
    }

    size_t Users::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:notepad.Users)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .notepad.User users = 1;
        total_size += 1UL * this->_internal_users_size();
        for (const auto &msg : this->_impl_.users_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Users::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        Users::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *Users::GetClassData() const { return &_class_data_; }

    void Users::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message &to_msg, const ::PROTOBUF_NAMESPACE_ID::Message &from_msg)
    {
        auto *const _this = static_cast<Users *>(&to_msg);
        auto &from = static_cast<const Users &>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:notepad.Users)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.users_.MergeFrom(from._impl_.users_);
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void Users::CopyFrom(const Users &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:notepad.Users)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Users::IsInitialized() const
    {
        return true;
    }

    void Users::InternalSwap(Users *other)
    {
        using std::swap;
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.users_.InternalSwap(&other->_impl_.users_);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata Users::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
            file_level_metadata_notepad_2eproto[1]);
    }

    // ===================================================================

    class Content::_Internal
    {
    public:
    };

    Content::Content(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                     bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:notepad.Content)
    }
    Content::Content(const Content &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        Content *const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.line_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.line_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.line_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_line().empty())
        {
            _this->_impl_.line_.Set(from._internal_line(),
                                    _this->GetArenaForAllocation());
        }
        // @@protoc_insertion_point(copy_constructor:notepad.Content)
    }

    inline void Content::SharedCtor(
        ::_pb::Arena *arena, bool is_message_owned)
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.line_){}, /*decltype(_impl_._cached_size_)*/ {}};
        _impl_.line_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.line_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    Content::~Content()
    {
        // @@protoc_insertion_point(destructor:notepad.Content)
        if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void Content::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.line_.Destroy();
    }

    void Content::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void Content::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:notepad.Content)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.line_.ClearToEmpty();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *Content::_InternalParse(const char *ptr, ::_pbi::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
            // string line = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                {
                    auto str = _internal_mutable_line();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.Content.line"));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            } // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        } // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t *Content::_InternalSerialize(
        uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:notepad.Content)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // string line = 1;
        if (!this->_internal_line().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_line().data(), static_cast<int>(this->_internal_line().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.Content.line");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_line(), target);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:notepad.Content)
        return target;
    }

    size_t Content::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:notepad.Content)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // string line = 1;
        if (!this->_internal_line().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_line());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Content::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        Content::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *Content::GetClassData() const { return &_class_data_; }

    void Content::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message &to_msg, const ::PROTOBUF_NAMESPACE_ID::Message &from_msg)
    {
        auto *const _this = static_cast<Content *>(&to_msg);
        auto &from = static_cast<const Content &>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:notepad.Content)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        if (!from._internal_line().empty())
        {
            _this->_internal_set_line(from._internal_line());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void Content::CopyFrom(const Content &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:notepad.Content)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Content::IsInitialized() const
    {
        return true;
    }

    void Content::InternalSwap(Content *other)
    {
        using std::swap;
        auto *lhs_arena = GetArenaForAllocation();
        auto *rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.line_, lhs_arena,
            &other->_impl_.line_, rhs_arena);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata Content::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
            file_level_metadata_notepad_2eproto[2]);
    }

    // ===================================================================

    class Notepad::_Internal
    {
    public:
    };

    Notepad::Notepad(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                     bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:notepad.Notepad)
    }
    Notepad::Notepad(const Notepad &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        Notepad *const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.contents_){from._impl_.contents_}, decltype(_impl_.id_){}, decltype(_impl_.name_){}, decltype(_impl_.user_name_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_id().empty())
        {
            _this->_impl_.id_.Set(from._internal_id(),
                                  _this->GetArenaForAllocation());
        }
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_name().empty())
        {
            _this->_impl_.name_.Set(from._internal_name(),
                                    _this->GetArenaForAllocation());
        }
        _impl_.user_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_user_name().empty())
        {
            _this->_impl_.user_name_.Set(from._internal_user_name(),
                                         _this->GetArenaForAllocation());
        }
        // @@protoc_insertion_point(copy_constructor:notepad.Notepad)
    }

    inline void Notepad::SharedCtor(
        ::_pb::Arena *arena, bool is_message_owned)
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.contents_){arena}, decltype(_impl_.id_){}, decltype(_impl_.name_){}, decltype(_impl_.user_name_){}, /*decltype(_impl_._cached_size_)*/ {}};
        _impl_.id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    Notepad::~Notepad()
    {
        // @@protoc_insertion_point(destructor:notepad.Notepad)
        if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void Notepad::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.contents_.~RepeatedPtrField();
        _impl_.id_.Destroy();
        _impl_.name_.Destroy();
        _impl_.user_name_.Destroy();
    }

    void Notepad::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void Notepad::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:notepad.Notepad)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.contents_.Clear();
        _impl_.id_.ClearToEmpty();
        _impl_.name_.ClearToEmpty();
        _impl_.user_name_.ClearToEmpty();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *Notepad::_InternalParse(const char *ptr, ::_pbi::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
            // string id = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                {
                    auto str = _internal_mutable_id();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.Notepad.id"));
                }
                else
                    goto handle_unusual;
                continue;
            // string name = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                {
                    auto str = _internal_mutable_name();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.Notepad.name"));
                }
                else
                    goto handle_unusual;
                continue;
            // string user_name = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                {
                    auto str = _internal_mutable_user_name();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.Notepad.user_name"));
                }
                else
                    goto handle_unusual;
                continue;
            // repeated .notepad.Content contents = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34))
                {
                    ptr -= 1;
                    do
                    {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_contents(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr))
                            break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            } // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        } // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t *Notepad::_InternalSerialize(
        uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:notepad.Notepad)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // string id = 1;
        if (!this->_internal_id().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.Notepad.id");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_id(), target);
        }

        // string name = 2;
        if (!this->_internal_name().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.Notepad.name");
            target = stream->WriteStringMaybeAliased(
                2, this->_internal_name(), target);
        }

        // string user_name = 3;
        if (!this->_internal_user_name().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_user_name().data(), static_cast<int>(this->_internal_user_name().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.Notepad.user_name");
            target = stream->WriteStringMaybeAliased(
                3, this->_internal_user_name(), target);
        }

        // repeated .notepad.Content contents = 4;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_contents_size());
             i < n; i++)
        {
            const auto &repfield = this->_internal_contents(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:notepad.Notepad)
        return target;
    }

    size_t Notepad::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:notepad.Notepad)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .notepad.Content contents = 4;
        total_size += 1UL * this->_internal_contents_size();
        for (const auto &msg : this->_impl_.contents_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        // string id = 1;
        if (!this->_internal_id().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_id());
        }

        // string name = 2;
        if (!this->_internal_name().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_name());
        }

        // string user_name = 3;
        if (!this->_internal_user_name().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_user_name());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Notepad::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        Notepad::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *Notepad::GetClassData() const { return &_class_data_; }

    void Notepad::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message &to_msg, const ::PROTOBUF_NAMESPACE_ID::Message &from_msg)
    {
        auto *const _this = static_cast<Notepad *>(&to_msg);
        auto &from = static_cast<const Notepad &>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:notepad.Notepad)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.contents_.MergeFrom(from._impl_.contents_);
        if (!from._internal_id().empty())
        {
            _this->_internal_set_id(from._internal_id());
        }
        if (!from._internal_name().empty())
        {
            _this->_internal_set_name(from._internal_name());
        }
        if (!from._internal_user_name().empty())
        {
            _this->_internal_set_user_name(from._internal_user_name());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void Notepad::CopyFrom(const Notepad &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:notepad.Notepad)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Notepad::IsInitialized() const
    {
        return true;
    }

    void Notepad::InternalSwap(Notepad *other)
    {
        using std::swap;
        auto *lhs_arena = GetArenaForAllocation();
        auto *rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.contents_.InternalSwap(&other->_impl_.contents_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.id_, lhs_arena,
            &other->_impl_.id_, rhs_arena);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.name_, lhs_arena,
            &other->_impl_.name_, rhs_arena);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.user_name_, lhs_arena,
            &other->_impl_.user_name_, rhs_arena);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata Notepad::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
            file_level_metadata_notepad_2eproto[3]);
    }

    // ===================================================================

    class Version::_Internal
    {
    public:
    };

    Version::Version(::PROTOBUF_NAMESPACE_ID::Arena *arena,
                     bool is_message_owned)
        : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned)
    {
        SharedCtor(arena, is_message_owned);
        // @@protoc_insertion_point(arena_constructor:notepad.Version)
    }
    Version::Version(const Version &from)
        : ::PROTOBUF_NAMESPACE_ID::Message()
    {
        Version *const _this = this;
        (void)_this;
        new (&_impl_) Impl_{
            decltype(_impl_.contents_){from._impl_.contents_}, decltype(_impl_.number_){}, decltype(_impl_.created_time_){}, decltype(_impl_.notepad_id_){}, /*decltype(_impl_._cached_size_)*/ {}};

        _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
        _impl_.number_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.number_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_number().empty())
        {
            _this->_impl_.number_.Set(from._internal_number(),
                                      _this->GetArenaForAllocation());
        }
        _impl_.created_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.created_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_created_time().empty())
        {
            _this->_impl_.created_time_.Set(from._internal_created_time(),
                                            _this->GetArenaForAllocation());
        }
        _impl_.notepad_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.notepad_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (!from._internal_notepad_id().empty())
        {
            _this->_impl_.notepad_id_.Set(from._internal_notepad_id(),
                                          _this->GetArenaForAllocation());
        }
        // @@protoc_insertion_point(copy_constructor:notepad.Version)
    }

    inline void Version::SharedCtor(
        ::_pb::Arena *arena, bool is_message_owned)
    {
        (void)arena;
        (void)is_message_owned;
        new (&_impl_) Impl_{
            decltype(_impl_.contents_){arena}, decltype(_impl_.number_){}, decltype(_impl_.created_time_){}, decltype(_impl_.notepad_id_){}, /*decltype(_impl_._cached_size_)*/ {}};
        _impl_.number_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.number_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.created_time_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.created_time_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.notepad_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.notepad_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
    }

    Version::~Version()
    {
        // @@protoc_insertion_point(destructor:notepad.Version)
        if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>())
        {
            (void)arena;
            return;
        }
        SharedDtor();
    }

    inline void Version::SharedDtor()
    {
        GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
        _impl_.contents_.~RepeatedPtrField();
        _impl_.number_.Destroy();
        _impl_.created_time_.Destroy();
        _impl_.notepad_id_.Destroy();
    }

    void Version::SetCachedSize(int size) const
    {
        _impl_._cached_size_.Set(size);
    }

    void Version::Clear()
    {
        // @@protoc_insertion_point(message_clear_start:notepad.Version)
        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        _impl_.contents_.Clear();
        _impl_.number_.ClearToEmpty();
        _impl_.created_time_.ClearToEmpty();
        _impl_.notepad_id_.ClearToEmpty();
        _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
    }

    const char *Version::_InternalParse(const char *ptr, ::_pbi::ParseContext *ctx)
    {
#define CHK_(x)                       \
    if (PROTOBUF_PREDICT_FALSE(!(x))) \
    goto failure
        while (!ctx->Done(&ptr))
        {
            uint32_t tag;
            ptr = ::_pbi::ReadTag(ptr, &tag);
            switch (tag >> 3)
            {
            // string number = 1;
            case 1:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10))
                {
                    auto str = _internal_mutable_number();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.Version.number"));
                }
                else
                    goto handle_unusual;
                continue;
            // string created_time = 2;
            case 2:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18))
                {
                    auto str = _internal_mutable_created_time();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.Version.created_time"));
                }
                else
                    goto handle_unusual;
                continue;
            // string notepad_id = 3;
            case 3:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26))
                {
                    auto str = _internal_mutable_notepad_id();
                    ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
                    CHK_(ptr);
                    CHK_(::_pbi::VerifyUTF8(str, "notepad.Version.notepad_id"));
                }
                else
                    goto handle_unusual;
                continue;
            // repeated .notepad.Content contents = 4;
            case 4:
                if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34))
                {
                    ptr -= 1;
                    do
                    {
                        ptr += 1;
                        ptr = ctx->ParseMessage(_internal_add_contents(), ptr);
                        CHK_(ptr);
                        if (!ctx->DataAvailable(ptr))
                            break;
                    } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
                }
                else
                    goto handle_unusual;
                continue;
            default:
                goto handle_unusual;
            } // switch
        handle_unusual:
            if ((tag == 0) || ((tag & 7) == 4))
            {
                CHK_(ptr);
                ctx->SetLastTag(tag);
                goto message_done;
            }
            ptr = UnknownFieldParse(
                tag,
                _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
                ptr, ctx);
            CHK_(ptr != nullptr);
        } // while
    message_done:
        return ptr;
    failure:
        ptr = nullptr;
        goto message_done;
#undef CHK_
    }

    uint8_t *Version::_InternalSerialize(
        uint8_t *target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream *stream) const
    {
        // @@protoc_insertion_point(serialize_to_array_start:notepad.Version)
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        // string number = 1;
        if (!this->_internal_number().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_number().data(), static_cast<int>(this->_internal_number().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.Version.number");
            target = stream->WriteStringMaybeAliased(
                1, this->_internal_number(), target);
        }

        // string created_time = 2;
        if (!this->_internal_created_time().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_created_time().data(), static_cast<int>(this->_internal_created_time().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.Version.created_time");
            target = stream->WriteStringMaybeAliased(
                2, this->_internal_created_time(), target);
        }

        // string notepad_id = 3;
        if (!this->_internal_notepad_id().empty())
        {
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
                this->_internal_notepad_id().data(), static_cast<int>(this->_internal_notepad_id().length()),
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
                "notepad.Version.notepad_id");
            target = stream->WriteStringMaybeAliased(
                3, this->_internal_notepad_id(), target);
        }

        // repeated .notepad.Content contents = 4;
        for (unsigned i = 0,
                      n = static_cast<unsigned>(this->_internal_contents_size());
             i < n; i++)
        {
            const auto &repfield = this->_internal_contents(i);
            target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
                InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
        }

        if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields()))
        {
            target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
        }
        // @@protoc_insertion_point(serialize_to_array_end:notepad.Version)
        return target;
    }

    size_t Version::ByteSizeLong() const
    {
        // @@protoc_insertion_point(message_byte_size_start:notepad.Version)
        size_t total_size = 0;

        uint32_t cached_has_bits = 0;
        // Prevent compiler warnings about cached_has_bits being unused
        (void)cached_has_bits;

        // repeated .notepad.Content contents = 4;
        total_size += 1UL * this->_internal_contents_size();
        for (const auto &msg : this->_impl_.contents_)
        {
            total_size +=
                ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
        }

        // string number = 1;
        if (!this->_internal_number().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_number());
        }

        // string created_time = 2;
        if (!this->_internal_created_time().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_created_time());
        }

        // string notepad_id = 3;
        if (!this->_internal_notepad_id().empty())
        {
            total_size += 1 +
                          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                              this->_internal_notepad_id());
        }

        return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
    }

    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Version::_class_data_ = {
        ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
        Version::MergeImpl};
    const ::PROTOBUF_NAMESPACE_ID::Message::ClassData *Version::GetClassData() const { return &_class_data_; }

    void Version::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message &to_msg, const ::PROTOBUF_NAMESPACE_ID::Message &from_msg)
    {
        auto *const _this = static_cast<Version *>(&to_msg);
        auto &from = static_cast<const Version &>(from_msg);
        // @@protoc_insertion_point(class_specific_merge_from_start:notepad.Version)
        GOOGLE_DCHECK_NE(&from, _this);
        uint32_t cached_has_bits = 0;
        (void)cached_has_bits;

        _this->_impl_.contents_.MergeFrom(from._impl_.contents_);
        if (!from._internal_number().empty())
        {
            _this->_internal_set_number(from._internal_number());
        }
        if (!from._internal_created_time().empty())
        {
            _this->_internal_set_created_time(from._internal_created_time());
        }
        if (!from._internal_notepad_id().empty())
        {
            _this->_internal_set_notepad_id(from._internal_notepad_id());
        }
        _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
    }

    void Version::CopyFrom(const Version &from)
    {
        // @@protoc_insertion_point(class_specific_copy_from_start:notepad.Version)
        if (&from == this)
            return;
        Clear();
        MergeFrom(from);
    }

    bool Version::IsInitialized() const
    {
        return true;
    }

    void Version::InternalSwap(Version *other)
    {
        using std::swap;
        auto *lhs_arena = GetArenaForAllocation();
        auto *rhs_arena = other->GetArenaForAllocation();
        _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        _impl_.contents_.InternalSwap(&other->_impl_.contents_);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.number_, lhs_arena,
            &other->_impl_.number_, rhs_arena);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.created_time_, lhs_arena,
            &other->_impl_.created_time_, rhs_arena);
        ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
            &_impl_.notepad_id_, lhs_arena,
            &other->_impl_.notepad_id_, rhs_arena);
    }

    ::PROTOBUF_NAMESPACE_ID::Metadata Version::GetMetadata() const
    {
        return ::_pbi::AssignDescriptors(
            &descriptor_table_notepad_2eproto_getter, &descriptor_table_notepad_2eproto_once,
            file_level_metadata_notepad_2eproto[4]);
    }

    // @@protoc_insertion_point(namespace_scope)
} // namespace notepad
PROTOBUF_NAMESPACE_OPEN
template <>
PROTOBUF_NOINLINE ::notepad::User *
Arena::CreateMaybeMessage<::notepad::User>(Arena *arena)
{
    return Arena::CreateMessageInternal<::notepad::User>(arena);
}
template <>
PROTOBUF_NOINLINE ::notepad::Users *
Arena::CreateMaybeMessage<::notepad::Users>(Arena *arena)
{
    return Arena::CreateMessageInternal<::notepad::Users>(arena);
}
template <>
PROTOBUF_NOINLINE ::notepad::Content *
Arena::CreateMaybeMessage<::notepad::Content>(Arena *arena)
{
    return Arena::CreateMessageInternal<::notepad::Content>(arena);
}
template <>
PROTOBUF_NOINLINE ::notepad::Notepad *
Arena::CreateMaybeMessage<::notepad::Notepad>(Arena *arena)
{
    return Arena::CreateMessageInternal<::notepad::Notepad>(arena);
}
template <>
PROTOBUF_NOINLINE ::notepad::Version *
Arena::CreateMaybeMessage<::notepad::Version>(Arena *arena)
{
    return Arena::CreateMessageInternal<::notepad::Version>(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
